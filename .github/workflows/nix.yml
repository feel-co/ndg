name: Nix Build

on:
  workflow_call:
  pull_request:
  push:
    branches: ["main"]

jobs:
  changes:
    name: "Detect Changed Files"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      files_changed: ${{ steps.changed-files.outputs.files }}
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v5

      - name: "Get changed files"
        id: changed-files
        uses: dorny/paths-filter@v3
        with:
          filters: |
            files:
              - '.github/workflows/nix.yml'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'ndg/**'
              - 'ndg-commonmark/**'
              - 'flake/*'
              - 'flake.nix'
              - 'flake.lock'
              - 'default.nix'
              - 'shell.nix'
  nix:
    name: Build with Nix
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.files_changed == 'true' }}
    strategy:
      matrix:
        system:
          - x86_64-linux
          - aarch64-linux

    steps:
      - name: "Set up QEMU support"
        if: runner.arch == 'X64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: "Install QEMU Deps"
        if: runner.arch = 'X64'
        run: sudo apt install binfmt-support qemu-user-static

      - uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          enable_kvm: true
          extra_nix_config: |
            system-features = nixos-test benchmark big-parallel kvm
            # Allow cross-compiling
            extra-platforms = aarch64-linux armv7l-linux i686-linux
            extra-sandbox-paths = /usr/libexec/qemu-binfmt /usr/bin/qemu-aarch64-static /usr/bin/qemu-aarch64-static /usr/bin/qemu-arm-static

      - uses: cachix/cachix-action@v16
        with:
          name: feel-co
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: "Checkout Repository"
        uses: actions/checkout@v5

      - name: "Build packages"
        run: nix build -L .#packages.${{ matrix.system }}.default -v

      # We already have cachix, but this'll help re-use our Nix store
      # inside the cache to achieve less wasted CI time. Unfortunately
      # Nix *really* sucks for incremental builds :(
      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # Restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/*.lock', '**/*.rs') }}

      # For debugging purposes, the default check is standalone so
      # it can be opened or served with zero overhead.
      - name: Upload doc artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "ndg-checks-${{ matrix.system }}-default"
          path: result/share/doc/*
          overwrite: true

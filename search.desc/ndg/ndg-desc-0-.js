searchState.loadedDescShard("ndg", 0, "NDG’s internal API exposed in order to be used in unit …\nCommand line interface for ndg\nExport default templates to a directory for customization\nGenerate shell completions and manpages\nProcess documentation and generate HTML\nInitialize a new NDG configuration file\nGenerate manpage from options\nPath to configuration file (TOML or JSON)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnable verbose debug logging\nOnly generate shell completions\nFooter text for the documentation\nFooter text to include at the end of the manpage\nForce overwrite if file already exists\nOverwrite existing files\nFormat of the configuration file (toml or json)\nWhether to generate search functionality\nHeader text to include at the beginning of the manpage\nWhether to enable syntax highlighting for code blocks\nPath to the directory containing markdown files\nNumber of threads to use for parallel processing\nOnly generate manpage\nPath to manpage URL mappings JSON file\nPath to a JSON file containing module options in the same …\nPath to a JSON file containing module options\nDepth of parent categories in options TOC\nPath to create the configuration file at\nOutput directory for template files\nDirectory to output generated files\nOutput directory for generated documentation\nOutput file for the generated manpage\nGitHub revision for linking to source files (defaults to …\nPath to custom Javascript file to include. This can be …\nSection number for the manpage\nPath to custom stylesheet. This can be specified multiple …\nPath to custom template file\nPath to directory containing template files. Use ‘ndg …\nTitle of the documentation. Will be used in various …\nTitle for the manpage\nGenerates both shell completions and a manpage for the ndg …\nGenerates shell completions for the ndg CLI.\nGenerates a manpage for the ndg CLI.\nConfiguration options for ndg\nDirectory containing additional assets\nFiles to exclude from sidebar navigation (included files)\nExport embedded templates to a directory for customization\nSearch for config files in common locations\nText to be inserted in the footer\nReturns the argument unchanged.\nCreate a new configuration from a file Only TOML and JSON …\nWhether to generate anchors for headings\nGenerate a default configuration file with commented …\nWhether to generate a search index\nGet template file path for a specific template name\nGet template directory path or file parent\nWhether to enable syntax highlighting for code blocks\nInput directory containing markdown files\nCalls <code>U::from(self)</code>.\nNumber of threads to use for parallel processing\nLoad config from file and CLI arguments\nPath to manpage URL mappings JSON file\nMerge CLI arguments into this config, prioritizing CLI …\nAdditional meta tags to inject into the HTML head (e.g., {…\nPath to options.json file (optional)\n<code>OpenGraph</code> tags to inject into the HTML head (e.g., {“…\nDepth of parent categories in options TOC\nOutput directory for generated documentation\nGitHub revision for linking to source files\nPaths to custom JavaScript files\nPaths to custom stylesheets\nPath to template directory containing all template files\nPath to custom template file\nTitle for the documentation\nValidate all paths specified in the configuration\nDefault configuration template in JSON format.\nDefault configuration template in TOML. We’ve also …\nError type for template operations.\nIndicates that the requested configuration format is not …\nReturns the argument unchanged.\nGet the correct configuration template based on the …\nCalls <code>U::from(self)</code>.\nRepresents a <code>NixOS</code> configuration option\nPath to the file where the option is declared\nOption declaration URL for hyperlink\nOption default value (JSON)\nOption default value as text\nOption description\nOption example value (JSON)\nOption example value as text\nReturns the argument unchanged.\nWhether this option is internal\nCalls <code>U::from(self)</code>.\nOption name (e.g., “services.nginx.enable”)\nProcess options from a JSON file\nWhether this option is read-only\nOption type (e.g., “boolean”, “string”, “signed …\nSearch document data structure\nCreate search page\nReturns the argument unchanged.\nGenerate search index from markdown files\nCalls <code>U::from(self)</code>.\nRender a documentation page\nRender <code>NixOS</code> module options page\nRender search page\nCalculate the relative path prefix needed to reach the …\nGenerate proper asset paths for templates based on file …\nProcess content through the markdown pipeline and extract …\nStrip markdown to get plain text\nEscape a leading dot to prevent it from being interpreted …\nGenerate a manpage from options JSON\nMap of characters that need to be escaped in manpages\nEscapes a string for use in manpages\nCollect all included files from markdown documents\nCopy assets to output directory\nCreate a fallback index page\nCreate a markdown processor from ndg config\nEnsure that index.html exists in the output directory\nExtract the page title from a markdown file\nGenerate a manpage from options JSON\nHandle the generate command\nProcess markdown files\nProcess options file")
searchState.loadedDescShard("ndg", 0, "NDG: Not a Docs Generator\nCommand line interface for ndg\nAll supported subcommands for the ndg CLI.\nExport default templates to a directory for customization.\nProcess documentation and generate HTML.\nInitialize a new NDG configuration file\nGenerate manpage from options.\nSubcommand to execute (see <code>Commands</code>)\nPath to configuration file (TOML or JSON)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse command line arguments into a <code>Cli</code> struct.\nEnable verbose debug logging\nFooter text for the documentation.\nFooter text to include at the end of the manpage\nForce overwrite if file already exists\nWhether to overwrite existing files.\nFormat of the configuration file.\nWhether to generate search data and render relevant …\nHeader text to include at the beginning of the manpage\nWhether to enable syntax highlighting for code blocks.\nPath to the directory containing markdown files.\nNumber of threads to use for parallel processing.\nPath to manpage URL mappings JSON file.\nPath to a JSON file containing module options in the same …\nPath to a JSON file containing module options.\nDepth of parent categories in options section in the …\nPath to create the configuration file at\nOutput directory for template files.\nOutput directory for generated documentation.\nOutput file for the generated manpage\nGitHub revision for linking to source files.\nPath to custom JavaScript file (can be specified multiple …\nSection number for the manpage\nPath to custom stylesheet (can be specified multiple times)\nPath to custom template file.\nPath to directory containing template files. Templates …\nSpecific templates to export (e.g., html, css, js). If not …\nTitle of the documentation. Will be used in various …\nTitle for the manpage\nConfiguration for the NDG documentation generator.\nDirectory containing additional assets.\nFiles to exclude from sidebar navigation (included files).\nExport embedded templates to a directory for customization\nSearch for config files in common locations\nText to be inserted in the footer.\nReturns the argument unchanged.\nLoad configuration from a file (TOML or JSON).\nWhether to generate anchors for headings.\nGenerate a default configuration file with commented …\nWhether to generate a search index.\nGet template file path for a specific template name\nGet template directory path or file parent\nWhether to enable syntax highlighting for code blocks.\nInput directory containing markdown files.\nCalls <code>U::from(self)</code>.\nNumber of threads to use for parallel processing.\nLoad configuration from file and CLI arguments, merging …\nPath to manpage URL mappings JSON file.\nMerge CLI arguments into this config, prioritizing CLI …\nAdditional meta tags to inject into the HTML head (e.g., {…\nPath to options.json file (optional).\n<code>OpenGraph</code> tags to inject into the HTML head (e.g., {“…\nDepth of parent categories in options TOC.\nOutput directory for generated documentation.\nGitHub revision for linking to source files.\nPaths to custom JavaScript files.\nPaths to custom stylesheets.\nPath to template directory containing all template files.\nPath to custom template file.\nTitle for the documentation.\nValidate all paths specified in the configuration\nDefault configuration template in JSON format.\nDefault configuration template in TOML. We’ve also …\nError type for template operations.\nIndicates that the requested configuration format is not …\nReturns the argument unchanged.\nGet the correct configuration template based on the …\nCalls <code>U::from(self)</code>.\nTop-level error type for the ndg crate.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents a <code>NixOS</code> configuration option.\nPath to the file where the option is declared\nOption declaration URL for hyperlink\nOption default value (JSON)\nOption default value as text\nOption description\nOption example value (JSON)\nOption example value as text\nReturns the argument unchanged.\nWhether this option is internal\nCalls <code>U::from(self)</code>.\nOption name (e.g., “services.nginx.enable”)\nProcess options from a JSON file and generate the options …\nWhether this option is read-only\nOption type (e.g., “boolean”, “string”, “signed …\nSearch document data structure\nCreate search page Create the search page HTML and write …\nReturns the argument unchanged.\nGenerate search index from markdown files Generate search …\nCalls <code>U::from(self)</code>.\nRender a documentation page\nRender <code>NixOS</code> module options page\nRender search page Render search page\nEscape a leading dot to prevent it from being interpreted …\nGenerate a manpage from options JSON Generate a manpage …\nMap of characters that need to be escaped in manpages\nEscapes a string for use in manpages\nEnsure that index.html exists in the output directory …\nCopies all required assets (CSS, JS, custom assets, …\nCalculate the relative path prefix needed to reach the …\nGenerate proper asset paths for templates based on file …\nProcess content through the markdown pipeline and extract …\nStrip markdown to get plain text\nCollects all included files from markdown documents in the …\nCreates a markdown processor from the NDG configuration.\nExtracts the page title from a markdown file.\nProcesses all markdown files in the input directory and …\nCreates a fallback index page listing available documents.\nProcess the options page for a given JSON file if …")
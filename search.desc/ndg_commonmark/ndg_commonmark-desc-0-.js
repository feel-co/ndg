searchState.loadedDescShard("ndg_commonmark", 0, "NDG-Commonmark\nRepresents a header in a Markdown document.\nRepresents a file that was included via <code>{=include=}</code> …\nResult of Markdown processing.\nOptional custom output path from <code>html:into-file</code> directive.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtracted headers (for <code>ToC</code>, navigation, etc).\nRendered HTML output.\nGenerated or explicit anchor ID for the header.\nFiles that were included via <code>{=include=}</code> directives.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHeader level (1-6).\nPath to the included file.\nMarkdown processing module with modular organization.\nProvides a trait-based architecture for syntax …\nHeader text (inline content, no markdown formatting).\nTitle of the document, if found (usually first H1).\nCore implementation of the Markdown processor.\nFeature-specific Markdown processing extensions.\nMain processing functions for Markdown content.\nType definitions for the Markdown processor.\nGitHub Flavored Markdown support\nManpage URL mapping support\nNixpkgs documentation extensions\nFeatures that can be queried on a processor instance.\nSyntax highlighting for code blocks\nCollect all markdown files from the input directory\nExtract all inline text from a heading node.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nApply GitHub Flavored Markdown (GFM) extensions to the …\nFormat the role markup as HTML based on the role type and …\nProcess block elements in markdown content.\nProcess file includes in Nixpkgs/NixOS documentation.\nProcess inline anchors in markdown content.\nProcess manpage references in HTML content.\nProcess MyST-style autolinks in markdown content.\nProcess option references Rewrites NixOS/Nix option …\nProcess role markup in markdown content.\nMarkdown processing with only Github Flavored Markdown …\nEnhanced Markdown processing with support for GFM and …\nMarkdown processing with only Nixpkgs-flavored <code>CommonMark</code> …\nPreset configurations for common use cases. In some cases …\nCreate a processor with sensible defaults for library …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProcess a batch of markdown files with consistent error …\nProcess markdown content from a file with error recovery.\nProcess markdown content from a file with custom base …\nProcess markdown content from a string with error recovery.\nSafely process markup content with error recovery.\nProcess markdown content with error recovery.\nTrait for AST transformations (e.g., prompt highlighting).\nOptions for configuring the Markdown processor.\nBuilder for constructing <code>MarkdownOptions</code> with method …\nMain Markdown processor.\nAST transformer for processing command and REPL prompts in …\nEnable or disable automatic linking for {option} role …\nEnable automatic linking for option role markup. When <code>true</code>…\nBuild the final <code>MarkdownOptions</code>.\nExtract headers and title from the markdown content.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate options from external configuration with fluent …\nEnable or disable GitHub Flavored Markdown.\nEnable GitHub Flavored Markdown (GFM) extensions.\nCheck if a specific feature is enabled.\nEnable or disable syntax highlighting.\nEnable syntax highlighting for code blocks.\nHighlight all code blocks in HTML using the configured …\nSet the syntax highlighting theme.\nOptional: Custom syntax highlighting theme name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the manpage URLs mapping for use with standalone …\nSet the manpage URLs path.\nOptional: Path to manpage URL mappings (for {manpage} …\nCreate a new <code>MarkdownProcessor</code> with the given options.\nCreate a new builder with default options.\nEnable or disable Nixpkgs extensions.\nEnable Nixpkgs/NixOS documentation extensions.\nAccess processor options.\nRender Markdown to HTML, extracting headers and title.\nEnable all available features based on compile-time …\nSet the base directory for resolving relative file paths.\nCreate options with runtime feature overrides.\nSyntastica-based syntax highlighter.\nAdd a custom theme\nCreate the default syntax manager based on available …\nCreate a Syntastica-based syntax manager with default …\nError types for syntax highlighting operations.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Syntastica highlighter with all available …\nSet the default theme\nCore types and traits for syntax highlighting.\nContains the error value\nContains the success value\nErrors that can occur during syntax highlighting.\nResult type for syntax highlighting operations.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfiguration for syntax highlighting\nTrait for syntax highlighting backends.\nHigh-level syntax highlighting manager.\nGet a list of available themes\nGet the configuration\nDefault theme to use when none is specified\nWhether to fall back to plain text for unsupported …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if a theme is available\nHighlight code with the specified language and theme.\nHighlight code with automatic language resolution and …\nHighlight code from a filename\nGet the underlying highlighter\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLanguage aliases for mapping common names to supported …\nDetect language from a file extension\nDetect language from a filename\nGet the name of this highlighter backend\nCreate a new syntax manager with the given highlighter and …\nResolve a language name using aliases\nUpdate the configuration\nGet a list of supported languages\nCheck if a language is supported\nCreate a new syntax manager with the default configuration\nCapitalize the first letter of a string.\nClean anchor patterns from text (removes {#anchor-id} …\nExtract the first heading from markdown content as the …\nExtract the first H1 heading from markdown content as the …\nEscape HTML special characters in text content.\nReturn true if the string looks like a markdown header …\nLoad manpage URL mappings from a JSON file.\nCreate a regex that never matches anything.\nApply a regex transformation to HTML elements using the …\nSlugify a string for use as an anchor ID. Converts to …\nStrip markdown formatting and return plain text.")